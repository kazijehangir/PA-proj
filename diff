10a11
> #include "llvm/Analysis/PostDominators.h"
27a29,33
>   virtual void getAnalysisUsage(AnalysisUsage &AU) const override {
>     FunctionPass::getAnalysisUsage(AU);
>     AU.addRequired<PostDominatorTreeWrapperPass>();
>   }
> 
29a36,51
>     PostDominatorTree& tree = getAnalysis<PostDominatorTreeWrapperPass>().getPostDomTree();
>     std::vector<BasicBlock*> bb_list;
>     for (auto& B : F) {
>       bb_list.push_back(&B);
>     }
>     std::map<BasicBlock*,std::vector<BasicBlock*> > ipdom;
>     std::map<BasicBlock*,std::vector<BasicBlock*> > pdomi;
>     for (int i = 0; i < bb_list.size(); i++) {
>       for (int j = 0; j < bb_list.size(); j++) {
>         if (tree.properlyDominates(bb_list[i],bb_list[j])) {
>           ipdom[bb_list[i]].push_back(bb_list[j]);
>           pdomi[bb_list[j]].push_back(bb_list[i]);
>         }
>       }
>     }
> 
31a54
> 
49,50d71
<       // currInst->dump();
<       // errs() << "inst\n";
54d74
<           // d->dump();
60c80
<       for (auto* b : getRDF(currInst->getParent())) {
---
>       for (auto* b : getRDF(currInst->getParent(), ipdom, pdomi)) {
71d90
<       // errs() << "\n";
97d115
<           // I.dump();
112,116c130,134
<       // if (!(I->getType()->isVoidTy())){
<       //   I->replaceAllUsesWith(Constant::getNullValue(I->getType()));
<       // }
<       // I->dump();
<       // I->eraseFromParent();
---
>       if (!(I->getType()->isVoidTy())){
>         I->replaceAllUsesWith(Constant::getNullValue(I->getType()));
>       }
>       I->dump();
>       I->eraseFromParent();
120d137
<     // F.dump();
136c153
<   std::vector<BasicBlock*> getRDF(BasicBlock* b) {
---
>   std::vector<BasicBlock*> getRDF(BasicBlock* b, std::map<BasicBlock*,std::vector<BasicBlock*> > ipdom, std::map<BasicBlock*,std::vector<BasicBlock*> > pdomi) {
140a158
>     
149c167
<                                      false, false);
\ No newline at end of file
---
>                                      false, true);
\ No newline at end of file
